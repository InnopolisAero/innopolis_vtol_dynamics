<launch>
    <!--
        Prerequirements for SITL:
        DONT_RUN=1 make px4_sitl gazebo_standard_vtol   // for InnoVTOL dynamics
        DONT_RUN=1 make px4_sitl gazebo_iris            // for FlightGoggles dynamics

        Prerequirements for true HITL, for example for cuav v5:
        make px4_fmu-v5_default upload
     -->
    <arg name="vehicle"                 default="standard_vtol"                 doc="[standard_vtol, iris]"/>
    <arg name="fcu_url"                 default="udp://:14540@127.0.0.1:14557"  doc="[udp://:14560@127.0.0.1:14558]"/>
    <arg name="run_rviz"                default="false"                         doc="[true, false]"/>
    <arg name="sitl_instead_of_hitl"    default="true"                          doc="[true means sitl, false means true hitl]"/>


    <!-- 1.1. SITL:
    - 1. launch the simulation and connect ROS to it via MAVROS - is it just publish px4 state to ROS topics?
    - 2. launch px4 SITL
    - 3. run px4 mavlink communicator
    -->
    <group if="$(arg sitl_instead_of_hitl)">
        <include file="$(find mavros)/launch/px4.launch">
            <arg name="fcu_url" value="$(arg fcu_url)"/>
        </include>
        <include file="$(find timed_roslaunch)/launch/timed_roslaunch.launch">
            <arg name="time" value="3" />
            <arg name="pkg" value="px4" />
            <arg name="node_name" value="px4" />

            <arg name="file" value="px4.launch" />
            <arg name="value" value="vehicle:=$(arg vehicle)" />
        </include>
        <node pkg="innopolis_vtol_dynamics" type="mavlink_communicator" name="px4_mavlink_communicatormavlink_communicator" output="screen">
        </node>
    </group>

    <!-- 1.2. True HITL:
    - 1. run px4 uavcan communicator
    -->
    <group unless="$(arg sitl_instead_of_hitl)">
        <node pkg="innopolis_vtol_dynamics" type="uavcan_communicator.py" name="px4_uavcan_communicator" output="screen">
        </node>
    </group>


    <!-- 2. Run dynamic simulation -->
    <rosparam file="$(find innopolis_vtol_dynamics)/config/multicopter_params.yaml" command="load" ns="uav/multicopter_params" />
    <rosparam file="$(find innopolis_vtol_dynamics)/config/sim_params.yaml" command="load" ns="uav/sim_params" />

    <node pkg="innopolis_vtol_dynamics" type="node" name="inno_dynamics_sim" output="screen">
        <param name="vehicle" value="$(arg vehicle)" />/>
    </node>

    <!-- 3. (optional) Run rviz -->
    <group if="$(arg run_rviz)">
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find innopolis_vtol_dynamics)/config/rviz.rviz" />

        <node pkg="tf" type="static_transform_publisher" name="ned_to_base_footprint"
                args="0.0 0.0 0.0 0.0 0.0 0.0 /uav/enu /base_footprint 40" />

        <param name="robot_description" command="$(find xacro)/xacro '$(find innopolis_vtol_dynamics)/urdf/vtol.urdf.xacro'" />

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />
    </group>
</launch>
